
# 자바스크립트에서 Objects
Object-oriented programming이라고 들어보셨죠? 흔히들 자바스크립트는 '객체 지향적이지 않다'라는 말을 하는데, 이는 그저 객체 지향 언어들이 많이 지원하는 '클래스'의 개념이 없는 것이지, 자바스크립트로 객체 지향 프로그래밍을 할 수 없다는 말은 아닙니다. 자바스크립트에서도 클래스 대신 prototype을 활용하여, 훌륭하게 객체 지향 프로그래밍을 할 수 있습니다. 

자바스크립트는 **간단한 객체 기반 패러다임** 상에서 만들어졌습니다. 객체는 **프로퍼티의 모음**이며, 프로퍼티는 Key, Value 연결로 이루어집니다. 프로퍼티의 Value로 함수가 들어가면, 이러한 프로퍼티는 메소드라고 부릅니다. 자바스크립트의 객체도 다른 프로그래밍 언어와 비슷하게 현실 세계의 사물(object)와 비교할 수 있습니다. 객체는 단독으로 존재가능한 개체(entity)이며, 프로퍼티(property)와 타입(type)을 갖습니다. 예를 들어, 컵과 비교를 해본다면 컵은 사물 객체인데 색깔, 모양, 무게, 재료 등의 속성을 가지고 있는 것이죠.

프로퍼티는 객체에 붙은 변수(variable)이라고 생각하면 되는데, 일반 변수와 기본적으로 똑같지만, 다만 객체에 속해 있다는 차이만 있을 뿐입니다. **객체의 프로퍼티들이 객체의 특징을 규정합니다.** 프로퍼티에 접근할 때는 도트(점) 표기법을 사용합니다.

```
objectName.propertyName
```

대괄호 표기법도 있는데, 이는 프로퍼티 이름이 사전에 미리 결정되지 않고 런타임 시점에 결정되는 경우 특히 유용합니다.

```
objectName["propertyName"]
```

객체가 해당 프로퍼티를 **직접** 소유하고 있는지 확인하는 메소드가 바로 `hasOwnProperty`인데, 상속된 프로퍼티는 확인하지 않고, 직접 가지고 있는 프로퍼티만 확인합니다.

객체를 생성하는 방법에는

- 객체 이니셜라이져 (creating objects with literal notation)
```
var obj = {
  prop_1: val_1,
  //...
  prop_n: val_n
};
```

### Refs
- [Objects](https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Working_with_Objects)
- [왜 property iteration하면서 hasOwnProperty if문을 한 번 더 적어주는지에 대하여](http://stackoverflow.com/questions/13632999/if-key-in-object-or-ifobject-hasownpropertykey)
- [hasOwnproperty](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)



- Prototype Object, Prototype Link, Prototype Property를 잘 구분하자.
- 자바스크립트의 모든 객체는 자신을 생성한 객체 원형(Prototype Object)에 대한 숨겨진 연결(Prototype Link)을 갖는다. 이때 자기 자신을 생성할 때 사용된 객체 원형을 프로토타입이라고 한다. 자바스크립트의 모든 객체는 Object 객체의 프로토타입을 기반으로 확장되었기 때문에 이 연결의 끝은 Object 객체의 프로토타입 Object이다.

